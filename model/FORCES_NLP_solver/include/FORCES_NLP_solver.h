#ifndef FORCES_NLP_solver_H
#define FORCES_NLP_solver_H
/* Generated by FORCESPRO v5.0.1 on Saturday, December 4, 2021 at 7:17:10 PM */

#ifndef SOLVER_STDIO_H
#define SOLVER_STDIO_H
#include <stdio.h>
#include <stddef.h>
#endif


/* DATA TYPE ------------------------------------------------------------*/
typedef double FORCES_NLP_solver_float;
typedef double FORCES_NLP_solver_callback_float;
typedef double FORCES_NLP_solverinterface_float;
typedef int FORCES_NLP_solver_int;

#ifndef SOLVER_STANDARD_TYPES
#define SOLVER_STANDARD_TYPES

typedef signed char solver_int8_signed;
typedef unsigned char solver_int8_unsigned;
typedef char solver_int8_default;
typedef signed short int solver_int16_signed;
typedef unsigned short int solver_int16_unsigned;
typedef short int solver_int16_default;
typedef signed int solver_int32_signed;
typedef unsigned int solver_int32_unsigned;
typedef int solver_int32_default;
typedef signed long long int solver_int64_signed;
typedef unsigned long long int solver_int64_unsigned;
typedef long long int solver_int64_default;

#endif

/* SOLVER SETTINGS ------------------------------------------------------*/

/* MISRA-C compliance */
#ifndef MISRA_C_FORCES_NLP_solver
#define MISRA_C_FORCES_NLP_solver (0)
#endif

/* restrict code */
#ifndef RESTRICT_CODE_FORCES_NLP_solver
#define RESTRICT_CODE_FORCES_NLP_solver (0)
#endif

/* print level */
#ifndef SET_PRINTLEVEL_FORCES_NLP_solver
#define SET_PRINTLEVEL_FORCES_NLP_solver    (0)
#endif

/* timing */
#ifndef SET_TIMING_FORCES_NLP_solver
#define SET_TIMING_FORCES_NLP_solver    (1)
#endif

/* Numeric Warnings */
/* #define PRINTNUMERICALWARNINGS */

/* maximum number of iterations  */
#define SET_MAXIT_FORCES_NLP_solver			(400)	 

/* desired maximum residual on equality constraints */
#define SET_ACC_RESEQ_FORCES_NLP_solver		(FORCES_NLP_solver_float)(1E-06)


/* RETURN CODES----------------------------------------------------------*/
/* solver has converged within desired accuracy */
#define OPTIMAL_FORCES_NLP_solver      (1)

/* maximum number of iterations has been reached */
#define MAXITREACHED_FORCES_NLP_solver (0)

/* solver has stopped due to a timeout */
#define TIMEOUT_FORCES_NLP_solver   (2)

/* NaN encountered in function evaluations */
#define BADFUNCEVAL_FORCES_NLP_solver  (-6)

/* no progress in method possible */
#define NOPROGRESS_FORCES_NLP_solver   (-7)

/* regularization error */
#define REGULARIZATION_ERROR_FORCES_NLP_solver   (-9)

/* invalid values in parameters */
#define PARAM_VALUE_ERROR_FORCES_NLP_solver   (-11)

/* too small timeout given */
#define INVALID_TIMEOUT_FORCES_NLP_solver   (-12)

/* error in linesearch */
#define LINESEARCH_ERROR_FORCES_NLP_solver   (-13)

/* thread error */
#define THREAD_FAILURE_FORCES_NLP_solver  (-98)

/* locking mechanism error */
#define LOCK_FAILURE_FORCES_NLP_solver  (-99)

/* licensing error - solver not valid on this machine */
#define LICENSE_ERROR_FORCES_NLP_solver  (-100)

/* qp solver error */
#define QP_SOLVER_FAILURE_FORCES_NLP_solver (-8)


/* INTEGRATORS RETURN CODE ------------*/
/* Integrator ran successfully */
#define INTEGRATOR_SUCCESS (11)
/* Number of steps set by user exceeds maximum number of steps allowed */
#define INTEGRATOR_MAXSTEPS_EXCEEDED (12)

/* PARAMETERS -----------------------------------------------------------*/
/* fill this with data before calling the solver! */
typedef struct
{
	    /* vector of size 6 */
    FORCES_NLP_solver_float xinit[6];

    /* vector of size 400 */
    FORCES_NLP_solver_float x0[400];

    /* scalar */
    FORCES_NLP_solver_int reinitialize;


} FORCES_NLP_solver_params;


/* OUTPUTS --------------------------------------------------------------*/
/* the desired variables are put here by the solver */
typedef struct
{
	    /* vector of size 8 */
    FORCES_NLP_solver_float x01[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x02[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x03[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x04[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x05[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x06[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x07[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x08[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x09[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x10[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x11[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x12[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x13[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x14[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x15[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x16[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x17[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x18[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x19[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x20[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x21[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x22[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x23[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x24[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x25[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x26[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x27[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x28[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x29[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x30[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x31[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x32[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x33[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x34[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x35[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x36[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x37[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x38[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x39[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x40[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x41[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x42[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x43[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x44[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x45[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x46[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x47[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x48[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x49[8];

    /* vector of size 8 */
    FORCES_NLP_solver_float x50[8];


} FORCES_NLP_solver_output;


/* SOLVER INFO ----------------------------------------------------------*/
/* diagnostic data from last interior point step */
typedef struct
{
	/* iteration number */
	solver_int32_default it;

	/* inf-norm of equality constraint residuals */
	FORCES_NLP_solver_float res_eq;

	/* norm of stationarity condition */
	FORCES_NLP_solver_float rsnorm;

	/* primal objective */
	FORCES_NLP_solver_float pobj;

	/* total solve time */
	FORCES_NLP_solver_float solvetime;

	/* time spent in function evaluations */
	FORCES_NLP_solver_float fevalstime;

	/* time spent solving QPs */
	FORCES_NLP_solver_float QPtime;
} FORCES_NLP_solver_info;



/* SOLVER FUNCTION DEFINITION -------------------------------------------*/
/* Time of Solver Generation: (UTC) Saturday, December 4, 2021 7:17:12 PM */
/* User License expires on: (UTC) Wednesday, June 1, 2022 10:00:00 PM (approx.) (at the time of code generation) */
/* Solver Static License expires on: (UTC) Wednesday, June 1, 2022 10:00:00 PM (approx.) */
/* Solver Generation Request Id: 0d2981af-e532-41ac-bf90-ac19bfd6495e */
/* examine exitflag before using the result! */
#ifdef __cplusplus
extern "C" {
#endif		

typedef void(*FORCES_NLP_solver_extfunc)(FORCES_NLP_solver_float* x, FORCES_NLP_solver_float* y, FORCES_NLP_solver_float* lambda, FORCES_NLP_solver_float* params, FORCES_NLP_solver_float* pobj, FORCES_NLP_solver_float* g, FORCES_NLP_solver_float* c, FORCES_NLP_solver_float* Jeq, FORCES_NLP_solver_float* h, FORCES_NLP_solver_float* Jineq, FORCES_NLP_solver_float* H, solver_int32_default stage, solver_int32_default iterations, solver_int32_default threadID);

extern solver_int32_default FORCES_NLP_solver_solve(FORCES_NLP_solver_params *params, FORCES_NLP_solver_output *output, FORCES_NLP_solver_info *info, FILE *fs, FORCES_NLP_solver_extfunc evalextfunctions_FORCES_NLP_solver);







#ifdef __cplusplus
}
#endif

#endif
